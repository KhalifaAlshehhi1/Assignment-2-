# -*- coding: utf-8 -*-
"""Assignment 2 - Software Implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zbsj3juRaeHlMHh9uLWDMy0BeIl7OieR
"""

#First Class
class Event:
    def __init__(self, event_id, name, location, start_time, end_time, description):
        self._event_id = event_id
        self._name = name
        self._location = location
        self._start_time = start_time
        self._end_time = end_time
        self._description = description

    # Getters
    def get_event_id(self):
        return self._event_id

    def get_name(self):
        return self._name

    def get_location(self):
        return self._location

    def get_start_time(self):
        return self._start_time

    def get_end_time(self):
        return self._end_time

    def get_description(self):
        return self._description

    # Setters
    def set_event_id(self, value):
        self._event_id = value

    def set_name(self, value):
        self._name = value

    def set_location(self, value):
        self._location = value

    def set_start_time(self, value):
        self._start_time = value

    def set_end_time(self, value):
        self._end_time = value

    def set_description(self, value):
        self._description = value


#Second Class
class Exhibition(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, exhibition_id, artworks=None):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._exhibition_id = exhibition_id
        self._artworks = artworks if artworks else []

    # Getters
    def get_exhibition_id(self):
        return self._exhibition_id

    def get_artworks(self):
        return self._artworks

    # Setters
    def set_exhibition_id(self, value):
        self._exhibition_id = value

    def set_artworks(self, value):
        if not isinstance(value, list):
            raise ValueError("Artworks must be a list.")
        self._artworks = value

    def add_artwork(self, artwork):
        if not isinstance(artwork, Artwork):
            raise ValueError("The artwork must be an instance of the Artwork class.")
        self._artworks.append(artwork)



#Third Class
class Artwork:
    def __init__(self, title, artist, creation_date, description):
        self._title = title
        self._artist = artist
        self._creation_date = creation_date
        self._description = description

    # Getters
    def get_title(self):
        return self._title

    def get_artist(self):
        return self._artist

    def get_creation_date(self):
        return self._creation_date

    def get_description(self):
        return self._description

    # Setters
    def set_title(self, value):
        self._title = value

    def set_artist(self, value):
        self._artist = value

    def set_creation_date(self, value):
        self._creation_date = value

    def set_description(self, value):
        self._description = value



#Fourth Class
class Visitor:
    def __init__(self, visitor_id, name, email, age, visitor_type):
        self._visitor_id = visitor_id
        self._name = name
        self._email = email
        self._age = age
        self._visitor_type = visitor_type

    # Getters
    def get_visitor_id(self):
        return self._visitor_id

    def get_name(self):
        return self._name

    def get_email(self):
        return self._email

    def get_age(self):
        return self._age

    def get_visitor_type(self):
        return self._visitor_type

    # Setters
    def set_visitor_id(self, value):
        self._visitor_id = value

    def set_name(self, value):
        self._name = value

    def set_email(self, value):
        self._email = value

    def set_age(self, value):
        self._age = value

    def set_visitor_type(self, value):
        self._visitor_type = value


#Fifth Class
class Ticket:
    def __init__(self, ticket_id, event, visitor, purchase_date, price):
        self._ticket_id = ticket_id
        self._event = event  # Event object
        self._visitor = visitor  # Visitor object
        self._purchase_date = purchase_date
        self._price = price

    # Getters
    def get_ticket_id(self):
        return self._ticket_id

    def get_event(self):
        return self._event

    def get_visitor(self):
        return self._visitor

    def get_purchase_date(self):
        return self._purchase_date

    def get_price(self):
        return self._price

    # Setters
    def set_ticket_id(self, value):
        self._ticket_id = value

    def set_event(self, value):
        self._event = value

    def set_visitor(self, value):
        self._visitor = value

    def set_purchase_date(self, value):
        self._purchase_date = value

    def set_price(self, value):
        self._price = value


#Sixth Class
class TicketManager:
    def __init__(self):
        self._tickets = []  # Stores Ticket objects

    # Method to create and store a new Ticket object
    def create_ticket(self, event, visitor, purchase_date, price):
        ticket = Ticket(len(self._tickets) + 1, event, visitor, purchase_date, price)
        self._tickets.append(ticket)
        return ticket

    # Getters
    def get_tickets(self):
        return self._tickets

    # This class primarily manages ticket creation and storage,
    # so explicit setters for individual attributes are not necessary here.


#Seventh Class
class Tour(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, guide_name, group_size):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._guide_name = guide_name
        self._group_size = group_size

    # Getters
    def get_guide_name(self):
        return self._guide_name

    def get_group_size(self):
        return self._group_size

    # Setters
    def set_guide_name(self, value):
        self._guide_name = value

    def set_group_size(self, value):
        self._group_size = value


#Eight Class
class SpecialEvent(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, theme):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._theme = theme

    # Getters
    def get_theme(self):
        return self._theme

    # Setters
    def set_theme(self, value):
        self._theme = value



def test_case_1_add_new_art_to_museum():
    artwork = Artwork("The Art", "Khalifa Alshehhi", "2023", "Iconic example of surrealism.")
    print(f"New Art Added: {artwork.get_title()} by {artwork.get_artist()}, {artwork.get_creation_date()}")

def test_case_2_open_new_exhibition():
    exhibition = Exhibition("101", "Football: The Sport Center", "Gallery C", "2024-06-01", "2024-09-01", "A dive into Cubism and its impact.", "EXH101", [])
    print(f"New Exhibition Opened: {exhibition.get_name()} from {exhibition.get_start_time()} to {exhibition.get_end_time()}")

def test_case_3_purchase_tickets():
    visitor = Visitor("V105", "Andrew Leonce", "Andrew@Best.com", 29, "Adult")
    event = Exhibition("102", "Renaissance Revived", "Gallery A", "2024-07-15", "2024-10-15", "Revisiting the Renaissance era.", "EXH102", [])
    ticket_manager = TicketManager()
    ticket = ticket_manager.create_ticket(event, visitor, "2024-07-10", 30.00)
    print(f"Ticket Purchased by {visitor.get_name()} for {event.get_name()} on {event.get_start_time()}")

def test_case_4_payment_receipt():
    visitor = Visitor("V106", "Mohammed Ahmed", "Mohammed@Bro.com", 32, "Adult")
    events = [
        SpecialEvent("103", "Jazz Under the Stars", "Outdoor Stage", "2024-08-05", "2024-08-05", "A night with jazz legends.", "Jazz Night"),
        Exhibition("104", "Abstract Expressions", "Gallery B", "2024-08-10", "2024-11-10", "Abstract art from the 20th century.", "EXH104", [])
    ]
    ticket_manager = TicketManager()
    total_cost = 0.0
    print(f"Payment Receipt for {visitor.get_name()}:")
    for event in events:
        ticket_price = 20.00 if isinstance(event, SpecialEvent) else 35.00
        ticket = ticket_manager.create_ticket(event, visitor, "2024-08-01", ticket_price)
        print(f"  - {event.get_name()} on {event.get_start_time()} at ${ticket.get_price()}")
        total_cost += ticket.get_price()
    print(f"Total Cost: ${total_cost}")

# Running the test cases
test_case_1_add_new_art_to_museum()
test_case_2_open_new_exhibition()
test_case_3_purchase_tickets()
test_case_4_payment_receipt()