# -*- coding: utf-8 -*-
"""Assignment 2 - Software Implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zbsj3juRaeHlMHh9uLWDMy0BeIl7OieR
"""

#First Class
class Event:
    def __init__(self, event_id, name, location, start_time, end_time, description):
        self._event_id = event_id
        self._name = name
        self._location = location
        self._start_time = start_time
        self._end_time = end_time
        self._description = description

    @property
    def event_id(self):
        return self._event_id

    @event_id.setter
    def event_id(self, value):
        self._event_id = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def location(self):
        return self._location

    @location.setter
    def location(self, value):
        self._location = value

    @property
    def start_time(self):
        return self._start_time

    @start_time.setter
    def start_time(self, value):
        self._start_time = value

    @property
    def end_time(self):
        return self._end_time

    @end_time.setter
    def end_time(self, value):
        self._end_time = value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, value):
        self._description = value


#Second Class
class Exhibition(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, exhibition_id, artworks=None):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._exhibition_id = exhibition_id
        self._artworks = artworks if artworks else []

    @property
    def exhibition_id(self):
        return self._exhibition_id

    @exhibition_id.setter
    def exhibition_id(self, value):
        self._exhibition_id = value

    @property
    def artworks(self):
        return self._artworks

    @artworks.setter
    def artworks(self, value):
        if not isinstance(value, list):
            raise ValueError("Artworks must be a list.")
        self._artworks = value

    def add_artwork(self, artwork):
        """Adds an artwork to the exhibition."""
        if not isinstance(artwork, Artwork):
            raise ValueError("The artwork must be an instance of the Artwork class.")
        self._artworks.append(artwork)


#Third Class
class Artwork:
    def __init__(self, title, artist, creation_date, description):
        self._title = title
        self._artist = artist
        self._creation_date = creation_date
        self._description = description

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, value):
        self._title = value

    @property
    def artist(self):
        return self._artist

    @artist.setter
    def artist(self, value):
        self._artist = value

    @property
    def creation_date(self):
        return self._creation_date

    @creation_date.setter
    def creation_date(self, value):
        self._creation_date = value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, value):
        self._description = value


#Fourth Class
class Visitor:
    # Assuming inclusion of email, age, and visitor_type attributes for a comprehensive approach
    def __init__(self, visitor_id, name, email, age, visitor_type):
        self._visitor_id = visitor_id
        self._name = name
        self._email = email
        self._age = age
        self._visitor_type = visitor_type

    @property
    def visitor_id(self):
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, value):
        self._visitor_id = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def email(self):
        return self._email

    @email.setter
    def email(self, value):
        self._email = value

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, value):
        self._age = value

    @property
    def visitor_type(self):
        return self._visitor_type

    @visitor_type.setter
    def visitor_type(self, value):
        self._visitor_type = value


#Fifth Class
class Ticket:
    def __init__(self, ticket_id, event, visitor, purchase_date, price):
        self._ticket_id = ticket_id
        self._event = event  # Event object
        self._visitor = visitor  # Visitor object
        self._purchase_date = purchase_date
        self._price = price

    @property
    def ticket_id(self):
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, value):
        self._ticket_id = value

    @property
    def event(self):
        return self._event

    @event.setter
    def event(self, value):
        if not isinstance(value, Event):
            raise ValueError("event must be an instance of Event.")
        self._event = value

    @property
    def visitor(self):
        return self._visitor

    @visitor.setter
    def visitor(self, value):
        if not isinstance(value, Visitor):
            raise ValueError("visitor must be an instance of Visitor.")
        self._visitor = value

    @property
    def purchase_date(self):
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, value):
        self._purchase_date = value

    @property
    def price(self):
        return self._price

    @price.setter
    def price(self, value):
        self._price = value


#Sixth Class
class TicketManager:
    def __init__(self):
        self._tickets = []  # A list to store Ticket objects

    def create_ticket(self, event, visitor, purchase_date, price):
        ticket = Ticket(len(self._tickets) + 1, event, visitor, purchase_date, price)
        self._tickets.append(ticket)
        return ticket

    def find_tickets_by_visitor(self, visitor_id):
        """Retrieve all tickets for a given visitor ID."""
        return [ticket for ticket in self._tickets if ticket.visitor.visitor_id == visitor_id]

    @property
    def tickets(self):
        return self._tickets


#Seventh Class
class Tour(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, guide_name, group_size):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._guide_name = guide_name
        self._group_size = group_size

    @property
    def guide_name(self):
        return self._guide_name

    @guide_name.setter
    def guide_name(self, value):
        self._guide_name = value

    @property
    def group_size(self):
        return self._group_size

    @group_size.setter
    def group_size(self, value):
        self._group_size = value


#Eight Class
class SpecialEvent(Event):
    def __init__(self, event_id, name, location, start_time, end_time, description, theme):
        super().__init__(event_id, name, location, start_time, end_time, description)
        self._theme = theme

    @property
    def theme(self):
        """Gets the theme of the special event."""
        return self._theme

    @theme.setter
    def theme(self, value):
        """Sets the theme of the special event."""
        self._theme = value



#First Test Case
def test_case_1_add_new_art_to_museum():
    exhibition = Exhibition("999", "Khalifa Exhibition", "Gallery 10", "2024-01-01", "2024-03-01", "A showcase of Impressionist art", "EXH010")
    new_artwork = Artwork("Khalifa piece of art", "Khalifa ALshehhi", "2023", "One of Khalifa Alshehhi collection.")
    exhibition.add_artwork(new_artwork)
    assert new_artwork in exhibition.artworks, "Artwork was not added to the exhibition."
    print("Test Case 1 Passed: Artwork successfully added to the exhibition.")


#Second Test Case
def test_case_2_open_new_exhibition():
    exhibition = Exhibition("308", "Modern Art Expo", "Main Hall", "2024-05-01", "2024-06-30", "Featuring modern art from the 25th century", "EXH308")
    assert exhibition.name == "Modern Art Expo", "Exhibition details do not match."
    print("Test Case 2 Passed: New exhibition successfully opened and verified.")


#Third Test Class
def test_case_3_purchase_tickets():
    visitor = Visitor("V090", "Andrew Leonce", "Leonce@best.com", 28, "Adult")
    event = Tour("007", "Guided Museum Tour", "Museum", "2024-07-15", "2024-07-15", "A guided tour of the museum.", "Mohammed Ahmed", 20)
    ticket_manager = TicketManager()
    ticket = ticket_manager.create_ticket(event, visitor, "2024-07-10", 15.00)
    assert ticket in ticket_manager.tickets, "Ticket purchase failed."
    print("Test Case 3 Passed: Ticket successfully purchased.")


#Fourth Test Class
def test_case_4_payment_receipt():
    visitor = Visitor("V005", "Lionel Messi", "Messi@Goat.com", 37, "Adult")
    event = SpecialEvent("010", "Evening with the Stars", "Observatory", "2024-08-20", "2024-08-20", "A night observing the stars.", "Stargazing Night")
    ticket_manager = TicketManager()
    ticket = ticket_manager.create_ticket(event, visitor, "2024-08-15", 20.00)
    # Simulating a receipt generation (for simplicity, assuming one ticket per purchase)
    receipt = f"Receipt: 1x ticket for '{event.name}' for {visitor.name}. Total: ${ticket.price}"
    assert "Receipt" in receipt and "$20.0" in receipt, "Receipt generation failed."
    print("Test Case 4 Passed: Payment receipt successfully displayed.")


test_case_1_add_new_art_to_museum()
test_case_2_open_new_exhibition()
test_case_3_purchase_tickets()
test_case_4_payment_receipt()